import {GoogleSpreadsheet} from 'google-spreadsheet';
import {JWT} from 'google-auth-library';

/**
 * 로드가 끝난 스프레드시트를 반환한다
 * @param {string} spreadsheetDocId
 * @param {string} sheetId
 * @param {string} client_email
 * @param {string} private_key
 * @returns {Promise<GoogleSpreadsheet>}
 */
export async function connectGoogleSpreadSheet({spreadsheetDocId = '', sheetId = '', client_email = '', private_key = ''} = {}) {
    console.info(
        '\u001B[32m',
        '=====================================================================================================================\n',
        // "# i18next auto-sync using Spreadsheet\n\n",
        // "  * Download translation resources from Spreadsheet and make /assets/locales/{{lng}}/{{ns}}.json\n",
        // "  * Upload translation resources to Spreadsheet.\n\n",
        `The Spreadsheet for translation is here (\u001B[34mhttps://docs.google.com/spreadsheets/d/${spreadsheetDocId}/#gid=${sheetId}\u001B[32m)\n`,
        '=====================================================================================================================',
        '\u001B[0m',
    );
    const auth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: client_email.replace(/\\n/g, "\n"),
        key: private_key.replace(/\\n/g, "\n"),
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    // spreadsheet key is the long id in the sheets URL
    const doc = new GoogleSpreadsheet(spreadsheetDocId, auth);

    await doc.loadInfo(); // loads document properties and worksheets

    return doc;
}




